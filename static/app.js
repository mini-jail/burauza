const Error = Symbol(); const Queue = new Set(); let nodeQueue; let parentNode; function scoped(callback) { const node = createNode(); parentNode = node; try { return batch(()=>{ let _cleanup = undefined; if (callback.length) { _cleanup = cleanNode.bind(undefined, node, true); } return callback(_cleanup); }); } catch (error) { handleError(error); } finally{ parentNode = node.parentNode; } } function createNode(initialValue, callback) { const node = { value: initialValue, parentNode, children: undefined, injections: undefined, cleanups: undefined, callback, sources: undefined, sourceSlots: undefined }; if (parentNode) { if (parentNode.children === undefined) { parentNode.children = [ node ]; } else { parentNode.children.push(node); } } return node; } function onMount(callback) { effect(()=>untrack(callback)); } function onDestroy(callback) { onCleanup(()=>untrack(callback)); } function on(dependency, callback) { return (current)=>{ dependency(); return untrack(()=>callback(current)); }; } function effect(callback, initialValue) { if (parentNode) { const node = createNode(initialValue, callback); if (nodeQueue) nodeQueue.add(node); else queueMicrotask(()=>updateNode(node, false)); } else { queueMicrotask(()=>callback(initialValue)); } } function lookup(node, id) { return node ? node.injections && id in node.injections ? node.injections[id] : lookup(node.parentNode, id) : undefined; } function createSource(initialValue) { return { value: initialValue, nodes: undefined, nodeSlots: undefined }; } function getSourceValue(source) { if (parentNode && parentNode.callback) { const sourceSlot = source.nodes?.length || 0, nodeSlot = parentNode.sources?.length || 0; if (parentNode.sources === undefined) { parentNode.sources = [ source ]; parentNode.sourceSlots = [ sourceSlot ]; } else { parentNode.sources.push(source); parentNode.sourceSlots.push(sourceSlot); } if (source.nodes === undefined) { source.nodes = [ parentNode ]; source.nodeSlots = [ nodeSlot ]; } else { source.nodes.push(parentNode); source.nodeSlots.push(nodeSlot); } } return source.value; } function setSourceValue(source, value) { if (typeof value === "function") value = value(source.value); source.value = value; if (source.nodes?.length) { batch(()=>{ for (const node of source.nodes){ nodeQueue.add(node); } }); } } function sourceValue(source, value) { return arguments.length === 1 ? getSourceValue(source) : setSourceValue(source, value); } function signal(initialValue) { const source = createSource(initialValue); return sourceValue.bind(undefined, source); } function handleError(error) { const errorCallbacks = lookup(parentNode, Error); if (!errorCallbacks) return reportError(error); for (const callback of errorCallbacks){ callback(error); } } function onCleanup(callback) { if (parentNode === undefined) return; else if (!parentNode.cleanups) parentNode.cleanups = [ callback ]; else parentNode.cleanups.push(callback); } function untrack(callback) { const node = parentNode; parentNode = undefined; const result = callback(); parentNode = node; return result; } function batch(callback) { if (nodeQueue) return callback(); nodeQueue = Queue; const result = callback(); queueMicrotask(flush); return result; } function flush() { if (nodeQueue === undefined) return; for (const node of nodeQueue){ nodeQueue.delete(node); updateNode(node, false); } nodeQueue = undefined; } function updateNode(node, complete) { cleanNode(node, complete); if (node.callback === undefined) return; const previousNode = parentNode; parentNode = node; try { node.value = node.callback(node.value); } catch (error) { handleError(error); } finally{ parentNode = previousNode; } } function cleanNodeSources(node) { let source, sourceSlot, sourceNode, nodeSlot; while(node.sources.length){ source = node.sources.pop(); sourceSlot = node.sourceSlots.pop(); if (source.nodes?.length) { sourceNode = source.nodes.pop(); nodeSlot = source.nodeSlots.pop(); if (sourceSlot < source.nodes.length) { source.nodes[sourceSlot] = sourceNode; source.nodeSlots[sourceSlot] = nodeSlot; sourceNode.sourceSlots[nodeSlot] = sourceSlot; } } } } function cleanChildNodes(node, complete) { const hasCallback = node.callback !== undefined; let childNode; while(node.children.length){ childNode = node.children.pop(); cleanNode(childNode, complete || hasCallback && childNode.callback !== undefined); } } function cleanNode(node, complete) { if (node.sources?.length) cleanNodeSources(node); if (node.children?.length) cleanChildNodes(node, complete); if (node.cleanups?.length) cleanup(node); node.injections = undefined; if (complete) disposeNode(node); } function cleanup(node) { while(node.cleanups?.length){ node.cleanups.pop()(); } } function disposeNode(node) { node.value = undefined; node.parentNode = undefined; node.children = undefined; node.cleanups = undefined; node.callback = undefined; node.sources = undefined; node.sourceSlots = undefined; } let parentAttrs; let parentFgt; let parentElt; function elementRef() { return parentElt; } function addElement(tagName, callback) { const elt = document.createElement(tagName); if (callback) modify(elt, callback); insert(elt); } function render(rootElt, callback) { return scoped((cleanup)=>{ const previousElt = parentElt; parentElt = rootElt; callback(); parentElt = previousElt; return cleanup; }); } function view(callback) { if (parentElt === undefined) return callback(); const anchor = parentElt.appendChild(new Text()); effect((current)=>{ const next = parentFgt = []; callback(); union(anchor, current, next); parentFgt = undefined; return next.length > 0 ? next : undefined; }); } function component(callback) { return (...args)=>scoped(()=>callback(...args)); } function union(anchor, current, next) { const elt = anchor.parentNode; if (current === undefined) { for (const node of next){ elt.insertBefore(node, anchor); } return; } const currentLength = current.length; const nextLength = next.length; let currentNode, i, j; outerLoop: for(i = 0; i < nextLength; i++){ currentNode = current[i]; for(j = 0; j < currentLength; j++){ if (current[j] === undefined) continue; else if (current[j].nodeType === 3 && next[i].nodeType === 3) { if (current[j].data !== next[i].data) current[j].data = next[i].data; next[i] = current[j]; } else if (current[j].isEqualNode(next[i])) next[i] = current[j]; if (next[i] === current[j]) { current[j] = undefined; if (i === j) continue outerLoop; break; } } elt.insertBefore(next[i], currentNode?.nextSibling || null); } while(current.length)current.pop()?.remove(); } function qualifiedName(name) { return name.replace(/([A-Z])/g, (match)=>"-" + match[0]).toLowerCase(); } function eventName(name) { return name.startsWith("on:") ? name.slice(3) : name.slice(2).toLowerCase(); } function objectAttribute(elt, field, object) { for(const subField in object){ const value = object[subField]; if (typeof value === "function") { effect((subCurr)=>{ const subNext = value(); if (subNext !== subCurr) elt[field][subField] = subNext || null; return subNext; }); } else { elt[field][subField] = value || null; } } } function dynamicAttribute(elt, field, value) { effect((current)=>{ const next = value(); if (next !== current) attribute(elt, field, next); return next; }); } function attribute(elt, field, value) { if (typeof value === "function" && !field.startsWith("on")) { dynamicAttribute(elt, field, value); } else if (typeof value === "object") { objectAttribute(elt, field, value); } else if (field === "textContent") { if (elt.firstChild?.nodeType === 3) elt.firstChild.data = String(value); else elt.prepend(String(value)); } else if (field in elt) { elt[field] = value; } else if (field.startsWith("on")) { elt.addEventListener(eventName(field), value); } else if (value != null) { elt.setAttributeNS(null, qualifiedName(field), String(value)); } else { elt.removeAttributeNS(null, qualifiedName(field)); } } function insert(node) { if (parentElt === undefined) parentFgt?.push(node); else parentElt?.appendChild(node); } function modify(elt, callback) { const previousElt = parentElt; const previousAttrs = parentAttrs; parentElt = elt; parentAttrs = callback.length ? {} : undefined; callback(parentAttrs); parentElt = undefined; if (parentAttrs) { for(const field in parentAttrs){ attribute(elt, field, parentAttrs[field]); } } parentElt = previousElt; parentAttrs = previousAttrs; } const globalSources = await getGlobalSources(); const localSources = signal(getLocalSources()); const sources = scoped(()=>{ const sources = ()=>[ ...globalSources, ...localSources() ]; effect((init)=>{ const sources = localSources(); if (init === true) return false; localStorage.setItem("sources", JSON.stringify(sources)); }, true); return sources; }); function getLocalSources() { const initSources = localStorage.getItem("sources") || "[]"; try { return JSON.parse(initSources); } catch { return []; } } async function getGlobalSources() { try { return await (await fetch("./sources.json")).json(); } catch { return []; } } function getSources() { return sources(); } function find(url) { return sources().find((source)=>source.url === url); } function first() { return sources()[0]; } function useBooru(config) { const posts = signal([]); effect(async ()=>{ const { page =1 , limit =40 , url , tags } = config(); const items = []; const source = find(url)?.url || url; if (source) { const api = new URL(source); const params = new URLSearchParams(); params.set("page", page.toString()); params.set("limit", limit.toString()); if (tags?.length) params.set("tags", tags.join(" ")); api.search = params.toString(); const response = await fetch(api); if (response.ok) { const json = await response.json(); for (const post of (Array.isArray(json) ? json : json.post) || []){ if (post.id === undefined) { continue; } if (post.file_url === undefined) { continue; } if (post.preview_url === undefined && post.preview_file_url === undefined) { continue; } items.push(normalizePost(post)); } } } posts(items); }); return posts; } function normalizePost(post) { const item = { id: post.id, fileUrl: post.file_url, previewUrl: post.preview_url || post.preview_file_url, tags: [] }; if (post.tags || post.tag_string) { item.tags = (post.tags || post.tag_string).split(" ").filter((value)=>value); } return item; } function useTitle(title) { const previousTitle = document.title; effect(()=>document.title = title()); onDestroy(()=>document.title = previousTitle); } const getHash = ()=>{ let hash = location.hash; if (hash.startsWith("#")) hash = hash.slice(1); return hash; }; const getParams = ()=>{ const params = new URLSearchParams(getHash()); return { url: params.has("url") ? params.get("url") : first()?.url, page: params.has("page") ? ~~params.get("page") : 1, limit: params.has("limit") ? ~~params.get("limit") : 40, search: params.has("search") ? params.get("search") : "", tags: params.has("tags") ? params.get("tags").split(",").filter((tag)=>tag) : [] }; }; const __default = scoped(()=>{ const init = getParams(); const url = signal(init.url); const limit = signal(init.limit); const loaded = signal(0); const size = signal(Infinity); const search = signal(init.search); const highlighted = signal([]); const tags = signal(init.tags); const page = signal(init.page); const select = signal(); const posts = useBooru(()=>{ return { url: url(), limit: limit(), page: page(), tags: tags() }; }); const postTags = ()=>{ const tags = []; for (const post of posts()){ for (const tag of post.tags){ if (tags.includes(tag) === false) tags.push(tag); } } return tags.sort((a, b)=>{ if (a < b) return -1; if (a > b) return 1; return 0; }); }; const addTag = (tag)=>!hasTag(tag) && tags([ ...tags(), tag ]); const delTag = (tag)=>tags(tags().filter(($)=>$ !== tag)); const toggleTag = (tag)=>hasTag(tag) ? delTag(tag) : addTag(tag); const hasTag = (tag)=>tags().includes(tag); const pageResetTrigger = ()=>(url(), tags(), undefined); const onPopState = ()=>{ const params = getParams(); url(params.url); page(params.page); limit(params.limit); search(params.search); tags(params.tags); }; effect(on(search, (current)=>{ if (current !== search()) { const tags = search().split(" ").filter((value)=>value); for (const tag of tags)addTag(tag); page(1); } return search(); }), init.search); useTitle(()=>{ let title = `ブラウザ：${page()}`; if (tags().length) { title += ` 「${tags().join("、 ")}」`; } return title; }); effect(on(posts, ()=>{ size(posts().length); loaded(0); })); effect(on(pageResetTrigger, (current)=>{ const next = `${url()}${tags().join()}`; if (current !== next) page(1); return next; }), `${url()}${tags().join()}`); effect((params)=>{ params.set("page", page().toString()); params.set("limit", limit().toString()); params.set("url", url()); if (search().length) params.set("search", search()); else params.delete("search"); if (tags().length) params.set("tags", tags().join(",")); else params.delete("tags"); removeEventListener("popstate", onPopState); location.hash = params.toString(); addEventListener("popstate", onPopState); return params; }, new URLSearchParams(getHash())); return { highlighted, tags, posts, postTags, page, select, addTag, delTag, hasTag, toggleTag, search, loaded, size, limit, url }; }); function usePervert() { const init = localStorage.getItem("is:pervert") === "true"; const codes = "imapervert".split(""); const pervert = signal(init); let index = 0; const onKeyUp = ({ key })=>{ if (index === codes.length - 1) { localStorage.setItem("is:pervert", "true"); pervert(true); return; } if (key != null && codes[index] != null && key.toLowerCase() === codes[index].toLowerCase()) { index++; } else { index = 0; pervert(false); } }; effect(()=>{ onCleanup(()=>removeEventListener("keyup", onKeyUp)); if (pervert()) return; addEventListener("keyup", onKeyUp); }); return pervert; } function uploadFile(accept, readAs) { return new Promise((res)=>{ const input = document.createElement("input"); input.type = "file"; input.accept = accept; input.onchange = (ev)=>{ const files = ev.currentTarget.files; if (files === null) return; const reader = new FileReader(); reader.onload = ()=>{ res(reader.result); }; reader[readAs](files[0]); }; input.click(); }); } function download(name, type, data) { const encoded = `${type};charset=utf-8,${encodeURIComponent(data)}`; const a = document.createElement("a"); a.href = "data:" + encoded; a.download = name; a.click(); } function Window(props) { const show = signal(false); const fullscreen = signal(false); effect(()=>show(props.show())); effect(()=>{ if (show()) props.onOpen?.(); else props.onClose?.(); }); addElement("div", (attr)=>{ attr.show = show; attr.class = "window"; attr.fullscreen = fullscreen; attr.style = { width: props.width, height: props.height }; addElement("div", (attr)=>{ attr.class = "window-title"; addElement("h3", (attr)=>{ attr.textContent = props.title; attr.title = props.title; }); addElement("div", (attr)=>{ attr.class = "window-title-children"; if (props.titleChildren) { view(props.titleChildren); } addElement("button", (attr)=>{ attr.class = ()=>`icon ${fullscreen() ? "compress" : "enlarge"}`; attr.title = ()=>`${fullscreen() ? "compress" : "enlarge"} window`; attr.onClick = ()=>fullscreen(!fullscreen()); }); addElement("button", (attr)=>{ attr.class = "icon close"; attr.title = "close window"; attr.onClick = ()=>show(false); }); }); }); addElement("div", (attr)=>{ attr.class = "window-content"; addElement("div", (attr)=>{ attr.class = "window-content-wrapper"; view(props.children); }); }); }); return props; } const __default1 = component(Window); const SourceEditor = component((sourceEdit)=>{ __default1({ title: ()=>"source editor", show: sourceEdit, titleChildren () { addElement("button", (attr)=>{ attr.class = "icon download-json"; attr.title = "download sources"; attr.onClick = ()=>{ download(`sources-${Date.now()}.json`, "application/json", JSON.stringify(localSources(), null, 2)); }; }); }, children () { for (const source of localSources()){ SourceEdit(source); } AddSource(); } }); }); const AddSource = component(()=>{ const name = signal(""); const url = signal(""); addElement("div", (attr)=>{ attr.class = "flex justify-content-space-betwee flex-gap-10"; addElement("div", (attr)=>{ attr.class = "flex align-items-baseline width-100"; addElement("label", (attr)=>attr.textContent = "name:"); addElement("input", (attr)=>{ attr.class = "flex-1"; attr.name = "name"; attr.value = name; attr.onInput = (ev)=>name(ev.currentTarget.value); attr.placeholder = "*Booru"; }); }); addElement("div", (attr)=>{ attr.class = "flex align-items-baseline width-100"; addElement("label", (attr)=>attr.textContent = "url:"); addElement("input", (attr)=>{ attr.class = "flex-1"; attr.name = "url"; attr.value = url; attr.onInput = (ev)=>url(ev.currentTarget.value); attr.placeholder = "https://..."; }); }); addElement("div", (attr)=>{ attr.class = "flex"; addElement("button", (attr)=>{ attr.class = "icon plus"; attr.title = "add source"; attr.disabled = ()=>!name() || !url(); attr.onClick = ()=>{ if (!name() || !url()) return; localSources(localSources().concat({ name: name(), url: url() })); url(""); name(""); }; }); addElement("button", (attr)=>{ attr.class = "icon import"; attr.title = "import source"; attr.onClick = async ()=>{ const data = await uploadFile(".json", "readAsText"); const json = JSON.parse(data); const importedSources = []; if (Array.isArray(json)) { for (const source of json){ if (source.name && source.url) { importedSources.push(source); } } } localSources(localSources().concat(importedSources)); }; }); }); }); }); const SourceEdit = component((source)=>{ addElement("div", (attr)=>{ attr.class = "flex justify-content-space-between flex-gap-10"; addElement("div", (attr)=>{ attr.class = "flex align-items-baseline width-100"; addElement("label", (attr)=>attr.textContent = "name:"); addElement("input", (attr)=>{ attr.class = "flex-1"; attr.name = "name"; attr.value = source.name; attr.placeholder = "*Booru"; attr.onInput = (ev)=>source.name = ev.currentTarget.value; }); }); addElement("div", (attr)=>{ attr.class = "flex align-items-baseline width-100"; addElement("label", (attr)=>attr.textContent = "url:"); addElement("input", (attr)=>{ attr.class = "flex-1"; attr.value = source.url; attr.placeholder = "https://..."; attr.onInput = (ev)=>source.url = ev.currentTarget.value; }); }); addElement("div", (attr)=>{ attr.class = "flex"; addElement("button", (attr)=>{ attr.class = "icon check"; attr.title = "save source"; attr.onClick = ()=>{ const newSource = { url: source.url, name: source.name }; localSources(localSources().filter(($)=>$ !== source).concat(newSource)); }; }); addElement("button", (attr)=>{ attr.class = "icon delete"; attr.title = "delete source"; attr.onClick = ()=>{ localSources(localSources().filter(($)=>$ !== source)); }; }); }); }); }); const cache = new Map(); function useWiki(id, trigger) { const wiki = signal(id); effect(on(trigger, ()=>{ if (trigger() === false) return wiki(id); if (cache.has(id)) return wiki(cache.get(id)); fetch(`https://danbooru.donmai.us/wiki_pages/${id}.json`).then(async (res)=>{ cache.set(id, res.ok ? (await res.json()).body : id); }); })); return wiki; } const Tag = component((name)=>{ const { toggleTag , tags , highlighted } = __default; const trigger = signal(false); const wiki = useWiki(name, trigger); addElement("div", (attr)=>{ attr.textContent = name; attr.class = "tag"; attr.title = wiki; attr.onClick = ()=>toggleTag(name); attr.onMouseOver = ()=>trigger(true); attr.onMouseOut = ()=>trigger(false); attr.state = ()=>{ if (tags().includes(name)) return "active"; else if (highlighted().includes(name)) return "highlight"; }; }); }); const Navigation = component(()=>{ const { postTags , tags , page } = __default; const sourceEdit = signal(false); addElement("nav", ()=>{ const ref = elementRef(); SourceEditor(sourceEdit); addElement("div", (attr)=>{ attr.class = "nav-top"; Inputs(sourceEdit); addElement("div", (attr)=>{ attr.class = "nav-paging"; addElement("button", (attr)=>{ attr.class = "previous"; attr.textContent = ()=>String(page() - 1); attr.disabled = ()=>page() <= 1; attr.onClick = ()=>page(page() - 1); }); addElement("button", (attr)=>{ attr.class = "current"; attr.disabled = true; attr.textContent = ()=>String(page()); }); addElement("button", (attr)=>{ attr.class = "next"; attr.textContent = ()=>String(page() + 1); attr.onClick = ()=>page(page() + 1); }); }); }); addElement("div", (attr)=>{ attr.class = "overflow-auto flex-1"; view(()=>{ const selTags = tags(); onMount(()=>ref.scrollTo({ top: 0, behavior: "smooth" })); for (const tag of tags())Tag(tag); for (const tag of postTags().filter((tag)=>!selTags.includes(tag))){ Tag(tag); } }); }); }); }); const Inputs = component((sourceEdit)=>{ const { search , url } = __default; const pervert = usePervert(); addElement("div", (attr)=>{ attr.class = "flex align-items-center"; view(()=>{ if (pervert() === false) return; addElement("button", (attr)=>{ attr.title = "choose image source"; attr.name = "source"; attr.type = "button"; attr.class = "icon source z-index-1"; addElement("div", (attr)=>{ attr.class = "sources"; addElement("div", (attr)=>{ attr.title = "open source editor"; attr.textContent = "source editor"; attr.onClick = ()=>sourceEdit(!sourceEdit()); }); for (const source of getSources()){ addElement("div", (attr)=>{ attr.active = ()=>source.url === url(); attr.textContent = source.name; attr.onClick = ()=>url(source.url); }); } }); }); }); addElement("button", (attr)=>{ attr.title = "browse source"; attr.name = "sourcecode"; attr.type = "button"; attr.class = "icon sourcecode"; attr.onClick = ()=>{ open("https://github.com/mini-jail/burauza", "_blank"); }; }); addElement("input", (attr)=>{ attr.class = "flex-1"; attr.name = "search"; attr.placeholder = "search..."; attr.value = search; attr.type = "text"; let id; attr.onKeyUp = (ev)=>{ const value = ev.currentTarget.value; clearTimeout(id); id = setTimeout(()=>search(value), 1000); }; }); }); }); const loads = signal(new Set()); function useLoading() { let timeoutId; render(document.body, ()=>{ addElement("div", (attr)=>{ attr.style = { position: "fixed", bottom: "10px", right: "10px", display: "flex", flexDirection: "column", gap: "10px", zIndex: "9999", pointerEvents: "none" }; view(()=>{ for (const props of loads()){ addElement("div", (attr)=>{ attr.class = "loading"; attr.textContent = props.text; attr.loading = ()=>{ const result = props.on(); clearTimeout(timeoutId); if (props.on()) { loads().delete(props); timeoutId = setTimeout(()=>loads(($)=>$), 2000); } return result; }; }); } }); }); }); } function load(props) { queueMicrotask(()=>{ loads(loads().add(props)); }); } const imageExtensions = [ "jpg", "jpeg", "bmp", "png", "gif" ]; const getExtension = (filename)=>{ return filename.split(".").at(-1); }; const isImage = (filename)=>{ const ext = getExtension(filename); if (ext === undefined) return false; return imageExtensions.includes(ext); }; const Preview = component(()=>{ const { select , posts } = __default; const show = signal(false); effect(()=>{ onCleanup(()=>show(false)); }); const onKeyUp = (ev)=>{ if (ev.key === "ArrowRight") showNext(); else if (ev.key === "ArrowLeft") showPrevious(); }; const showPrevious = ()=>{ const index = posts().indexOf(select()); const prev = index - 1 === -1 ? posts().length - 1 : index - 1; select(posts()[prev]); }; const showNext = ()=>{ const index = posts().indexOf(select()); const next = index + 1 === posts().length ? 0 : index + 1; select(posts()[next]); }; __default1({ title: ()=>String(select()?.fileUrl), show: show, width: "100vw", onOpen: ()=>addEventListener("keyup", onKeyUp), onClose: ()=>removeEventListener("keyup", onKeyUp), titleChildren () { addElement("button", (attr)=>{ attr.class = "icon left"; attr.onClick = showPrevious; }); addElement("button", (attr)=>{ attr.class = "icon right"; attr.onClick = showNext; }); addElement("button", (attr)=>{ attr.class = "icon curly-arrow"; attr.title = "open file in new tab"; attr.onClick = ()=>open(select().fileUrl, "_blank"); }); }, children () { addElement("div", (attr)=>{ attr.class = "preview"; view(()=>{ const post = select(); if (post === undefined) return; load({ on: show, text: ()=>`loading "${post.id}"` }); addElement("img", (attr)=>{ attr.class = "preview-img"; attr.src = isImage(post.fileUrl) ? post.fileUrl : post.previewUrl; attr.alt = post.fileUrl; attr.onLoad = ()=>show(true); attr.onError = (ev)=>{ if (ev.currentTarget.src === post.fileUrl) { ev.currentTarget.src = post.previewUrl; } }; }); addElement("div", (attr)=>{ attr.style = ` display: flex; gap: 5px; flex-wrap: wrap; }`; for (const tag of post.tags)Tag(tag); }); }); }); } }); }); const Posts = component(()=>{ const { posts , highlighted , select , loaded , size } = __default; addElement("main", (attr)=>{ const ref = elementRef(); attr.ready = ()=>size() <= loaded(); view(()=>{ load({ on: ()=>size() <= loaded(), text: ()=>`loading posts ${loaded()}/${size()}` }); onMount(()=>ref.scrollTo({ top: 0, behavior: "smooth" })); for (const post of posts()){ addElement("article", ()=>{ addElement("img", (attr)=>{ attr.src = post.previewUrl; attr.alt = attr.src; attr.onClick = ()=>select(post); attr.onLoad = ()=>loaded(loaded() + 1); attr.onError = attr.onLoad; attr.onMouseOver = ()=>highlighted(post.tags); attr.onMouseOut = ()=>highlighted([]); }); }); } }); }); }); const App = component(()=>{ Navigation(); Posts(); Preview(); }); render(document.body, ()=>{ useLoading(); App(); }); //# sourceMappingURL=data:application/json;base64,